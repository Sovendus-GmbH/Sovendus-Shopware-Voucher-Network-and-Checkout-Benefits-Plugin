{"version":3,"file":"sovendus-page.js","sources":["../../../../../node_modules/sovendus-integration-types/dist/v3/index.mjs","../../../../../node_modules/sovendus-integration-scripts/src/scripts/vanilla/shared-utils.ts","../../../../../node_modules/sovendus-integration-scripts/src/scripts/vanilla/constants.ts","../../../../../node_modules/sovendus-integration-scripts/src/scripts/vanilla/landing-page/utils.ts","../../../../../node_modules/sovendus-integration-scripts/src/scripts/vanilla/landing-page/sovendus-page-handler.ts","../../../../../node_modules/sovendus-integration-scripts/src/scripts/vanilla/landing-page/sovendus-page.ts","../../../../../node_modules/sovendus-integration-scripts/src/scripts/vanilla/landing-page/sovendus-page-loader.ts"],"sourcesContent":["var CountryCodes = /* @__PURE__ */ ((CountryCodes2) => {\n  CountryCodes2[\"AT\"] = \"AT\";\n  CountryCodes2[\"BE\"] = \"BE\";\n  CountryCodes2[\"DK\"] = \"DK\";\n  CountryCodes2[\"FR\"] = \"FR\";\n  CountryCodes2[\"DE\"] = \"DE\";\n  CountryCodes2[\"IE\"] = \"IE\";\n  CountryCodes2[\"IT\"] = \"IT\";\n  CountryCodes2[\"NL\"] = \"NL\";\n  CountryCodes2[\"NO\"] = \"NO\";\n  CountryCodes2[\"PL\"] = \"PL\";\n  CountryCodes2[\"ES\"] = \"ES\";\n  CountryCodes2[\"SE\"] = \"SE\";\n  CountryCodes2[\"CH\"] = \"CH\";\n  CountryCodes2[\"GB\"] = \"GB\";\n  return CountryCodes2;\n})(CountryCodes || {});\nvar LanguageCodes = /* @__PURE__ */ ((LanguageCodes2) => {\n  LanguageCodes2[\"DA\"] = \"DA\";\n  LanguageCodes2[\"FI\"] = \"FI\";\n  LanguageCodes2[\"FR\"] = \"FR\";\n  LanguageCodes2[\"DE\"] = \"DE\";\n  LanguageCodes2[\"EN\"] = \"EN\";\n  LanguageCodes2[\"IT\"] = \"IT\";\n  LanguageCodes2[\"NL\"] = \"NL\";\n  LanguageCodes2[\"NB\"] = \"NB\";\n  LanguageCodes2[\"PL\"] = \"PL\";\n  LanguageCodes2[\"PT\"] = \"PT\";\n  LanguageCodes2[\"ES\"] = \"ES\";\n  LanguageCodes2[\"SV\"] = \"SV\";\n  return LanguageCodes2;\n})(LanguageCodes || {});\nconst COUNTRIES = {\n  [\n    \"AT\"\n    /* AT */\n  ]: \"Austria\",\n  [\n    \"BE\"\n    /* BE */\n  ]: \"Belgium\",\n  [\n    \"DK\"\n    /* DK */\n  ]: \"Denmark\",\n  // [CountryCodes.FI]: \"Finland\",\n  [\n    \"FR\"\n    /* FR */\n  ]: \"France\",\n  [\n    \"DE\"\n    /* DE */\n  ]: \"Germany\",\n  [\n    \"IE\"\n    /* IE */\n  ]: \"Ireland\",\n  [\n    \"IT\"\n    /* IT */\n  ]: \"Italy\",\n  [\n    \"NL\"\n    /* NL */\n  ]: \"Netherlands\",\n  [\n    \"NO\"\n    /* NO */\n  ]: \"Norway\",\n  [\n    \"PL\"\n    /* PL */\n  ]: \"Poland\",\n  // [CountryCodes.PT]: \"Portugal\",\n  [\n    \"ES\"\n    /* ES */\n  ]: \"Spain\",\n  [\n    \"SE\"\n    /* SE */\n  ]: \"Sweden\",\n  [\n    \"CH\"\n    /* CH */\n  ]: \"Switzerland French\",\n  [\n    \"GB\"\n    /* GB */\n  ]: \"United Kingdom\"\n};\nconst LANGUAGES_BY_COUNTRIES = {\n  [\n    \"AT\"\n    /* AT */\n  ]: { [\n    \"DE\"\n    /* DE */\n  ]: \"Austria\" },\n  [\n    \"BE\"\n    /* BE */\n  ]: {\n    [\n      \"FR\"\n      /* FR */\n    ]: \"Belgium French\",\n    [\n      \"NL\"\n      /* NL */\n    ]: \"Belgium Dutch\"\n  },\n  [\n    \"DK\"\n    /* DK */\n  ]: { [\n    \"DA\"\n    /* DA */\n  ]: \"Denmark\" },\n  // [CountryCodes.FI]: { [LanguageCodes.FI]: \"Finland\" },\n  [\n    \"FR\"\n    /* FR */\n  ]: { [\n    \"FR\"\n    /* FR */\n  ]: \"France\" },\n  [\n    \"DE\"\n    /* DE */\n  ]: { [\n    \"DE\"\n    /* DE */\n  ]: \"Germany\" },\n  [\n    \"IE\"\n    /* IE */\n  ]: { [\n    \"EN\"\n    /* EN */\n  ]: \"Ireland\" },\n  [\n    \"IT\"\n    /* IT */\n  ]: { [\n    \"IT\"\n    /* IT */\n  ]: \"Italy\" },\n  [\n    \"NL\"\n    /* NL */\n  ]: { [\n    \"NL\"\n    /* NL */\n  ]: \"Netherlands\" },\n  [\n    \"NO\"\n    /* NO */\n  ]: { [\n    \"NB\"\n    /* NB */\n  ]: \"Norway\" },\n  [\n    \"PL\"\n    /* PL */\n  ]: { [\n    \"PL\"\n    /* PL */\n  ]: \"Poland\" },\n  // [CountryCodes.PT]: { [LanguageCodes.PT]: \"Portugal\" },\n  [\n    \"ES\"\n    /* ES */\n  ]: { [\n    \"ES\"\n    /* ES */\n  ]: \"Spain\" },\n  [\n    \"SE\"\n    /* SE */\n  ]: { [\n    \"SV\"\n    /* SV */\n  ]: \"Sweden\" },\n  [\n    \"CH\"\n    /* CH */\n  ]: {\n    [\n      \"FR\"\n      /* FR */\n    ]: \"Switzerland French\",\n    [\n      \"DE\"\n      /* DE */\n    ]: \"Switzerland German\",\n    [\n      \"IT\"\n      /* IT */\n    ]: \"Switzerland Italian\"\n  },\n  [\n    \"GB\"\n    /* GB */\n  ]: { [\n    \"EN\"\n    /* EN */\n  ]: \"United Kingdom\" }\n};\nvar Versions = /* @__PURE__ */ ((Versions2) => {\n  Versions2[\"ONE\"] = \"1\";\n  Versions2[\"TWO\"] = \"2\";\n  Versions2[\"THREE\"] = \"3\";\n  return Versions2;\n})(Versions || {});\nconst defaultSovendusAppSettings = {\n  version: \"3\"\n  /* THREE */\n};\nconst defaultIframeContainerQuerySelector = { selector: \"#sovendus-container\", where: \"none\" };\nvar SettingsType = /* @__PURE__ */ ((SettingsType2) => {\n  SettingsType2[\"SIMPLE\"] = \"simple\";\n  SettingsType2[\"COUNTRY\"] = \"country\";\n  return SettingsType2;\n})(SettingsType || {});\nconst sovendusPageApis = {\n  // this only gets called when a optimize id is set\n  // you don't have to whitelist this domain if you don't want to use Sovendus Optimize\n  optimize: \"https://www.sovopt.com/\"\n};\nconst defaultSovendusPageConfig = {\n  settings: defaultSovendusAppSettings,\n  country: void 0,\n  integrationType: \"\"\n};\nconst defaultSovendusThankyouPageConfig = {\n  settings: defaultSovendusAppSettings,\n  integrationType: \"\",\n  sovDebugLevel: void 0,\n  iframeContainerQuerySelector: void 0,\n  orderData: {},\n  customerData: {}\n};\nvar VariableIdentifiersType = /* @__PURE__ */ ((VariableIdentifiersType2) => {\n  VariableIdentifiersType2[\"integrationIdentifier_sovIframes\"] = \"sovIframes\";\n  VariableIdentifiersType2[\"legacy_integrationIdentifier_sovAbo\"] = \"_sovAboData\";\n  VariableIdentifiersType2[\"legacy_integrationIdentifier_gconData\"] = \"_gconData\";\n  return VariableIdentifiersType2;\n})(VariableIdentifiersType || {});\nconst version1 = \"v1\";\nconst latestVersion = version1;\nconst sovLoaderScriptId = \"sovloader-script\";\nexport {\n  COUNTRIES,\n  CountryCodes,\n  LANGUAGES_BY_COUNTRIES,\n  LanguageCodes,\n  SettingsType,\n  VariableIdentifiersType,\n  Versions,\n  defaultIframeContainerQuerySelector,\n  defaultSovendusAppSettings,\n  defaultSovendusPageConfig,\n  defaultSovendusThankyouPageConfig,\n  latestVersion,\n  sovLoaderScriptId,\n  sovendusPageApis,\n  version1\n};\n//# sourceMappingURL=index.mjs.map\n","import type {\n  ExplicitAnyType,\n  SovendusAppSettings,\n} from \"sovendus-integration-types\";\nimport { CountryCodes, SettingsType } from \"sovendus-integration-types\";\n\nexport function getPerformanceTime(): number {\n  throwErrorInNonBrowserContext({\n    methodName: \"getPerformanceTime\",\n    pageType: \"LandingPage\",\n    requiresWindow: true,\n  });\n  return window.performance?.now?.() || 0;\n}\n\nexport function detectCountryCode(): CountryCodes | undefined {\n  return (\n    getCountryCodeFromHtmlTag() ||\n    getCountryFromDomain() ||\n    getCountryFromPagePath()\n  );\n}\n\nexport function getOptimizeId(\n  settings: SovendusAppSettings,\n  country: CountryCodes | \"UK\" | undefined,\n): string | undefined {\n  if (settings?.optimize?.settingsType === SettingsType.SIMPLE) {\n    if (\n      settings?.optimize?.simple?.isEnabled !== false &&\n      settings?.optimize?.simple?.optimizeId\n    ) {\n      return settings.optimize.simple.optimizeId;\n    }\n  } else {\n    if (settings.optimize?.countries?.ids) {\n      const uncleanedCountryCode: CountryCodes | \"UK\" | undefined = country;\n      const countryCode =\n        uncleanedCountryCode === \"UK\" ? CountryCodes.GB : uncleanedCountryCode;\n      if (countryCode) {\n        const countryElement = settings.optimize.countries?.ids?.[countryCode];\n        return countryElement?.isEnabled\n          ? countryElement?.optimizeId\n          : undefined;\n      }\n      const fallbackId: string | undefined =\n        settings?.optimize?.countries?.fallBackId;\n      if (settings.optimize?.countries.fallBackEnabled && fallbackId) {\n        return fallbackId;\n      }\n    }\n  }\n  return undefined;\n}\n\nexport function throwErrorInNonBrowserContext({\n  methodName,\n  requiresWindow,\n  requiresDocument,\n  pageType,\n}: {\n  methodName: string;\n  requiresWindow?: boolean;\n  requiresDocument?: boolean;\n  pageType: \"LandingPage\" | \"ThankyouPage\";\n}): void {\n  if (\n    (requiresDocument ? typeof document === \"undefined\" : false) ||\n    (requiresWindow ? typeof window === \"undefined\" : false)\n  ) {\n    throw new Error(\n      `Sovendus App [${pageType}] - ${methodName}: ${requiresWindow ? \"window\" : \"\"} ${requiresDocument ? \"document\" : \"\"} is not available in your context, you can override this method`,\n    );\n  }\n}\n\nexport function loggerError(\n  message: string,\n  pageType: \"LandingPage\" | \"ThankyouPage\",\n  ...other: unknown[]\n): void {\n  // eslint-disable-next-line no-console\n  console.error(`Sovendus App [${pageType}] - ${message}`, ...other);\n}\n\nexport function loggerInfo(\n  message: string,\n  pageType: \"LandingPage\" | \"ThankyouPage\",\n  ...other: unknown[]\n): void {\n  // eslint-disable-next-line no-console\n  console.log(`Sovendus App [${pageType}] - ${message}`, ...other);\n}\n\nexport function getCountryCodeFromHtmlTag(): CountryCodes | undefined {\n  throwErrorInNonBrowserContext({\n    methodName: \"getCountryCodeFromHtmlTag\",\n    pageType: \"LandingPage\",\n    requiresDocument: true,\n  });\n  const lang = document.documentElement.lang;\n  const countryCode = lang.split(\"-\")[1];\n  return countryCode ? castToCountry(countryCode.toUpperCase()) : undefined;\n}\n\nexport function getCountryFromDomain(): CountryCodes | undefined {\n  throwErrorInNonBrowserContext({\n    methodName: \"getCountryFromDomain\",\n    pageType: \"LandingPage\",\n    requiresWindow: true,\n  });\n  const domainToCountry: {\n    [key: string]: string | undefined;\n  } = {\n    \"de\": \"DE\",\n    \"at\": \"AT\",\n    \"ch\": \"CH\",\n    \"uk\": \"GB\",\n    \"co.uk\": \"GB\",\n    \"com\": undefined,\n    \"se\": \"SE\",\n    \"no\": \"NO\",\n    \"dk\": \"DK\",\n    \"fi\": \"FI\",\n    \"fr\": \"FR\",\n    \"be\": \"BE\",\n    \"nl\": \"NL\",\n    \"it\": \"IT\",\n    \"es\": \"ES\",\n    \"pt\": \"PT\",\n    \"pl\": \"PL\",\n    \"cz\": \"CZ\",\n    \"sk\": \"SK\",\n    \"hu\": \"HU\",\n  };\n  const domain = window.location.hostname;\n  const domainParts = domain.split(\".\");\n  const domainPart = domainParts[domainParts.length - 1];\n  return (domainPart ? domainToCountry[domainPart] : undefined) as\n    | CountryCodes\n    | undefined;\n}\n\nexport function getCountryFromPagePath(): CountryCodes | undefined {\n  throwErrorInNonBrowserContext({\n    methodName: \"getCountryFromDomain\",\n    pageType: \"LandingPage\",\n    requiresWindow: true,\n  });\n  const path = window.location.pathname;\n  const pathParts = path.split(\"/\");\n  const country = pathParts[1];\n  return castToCountry(country?.toUpperCase());\n}\n\nexport function castToCountry(\n  value: string | undefined,\n): CountryCodes | undefined {\n  if (value && Object.values(CountryCodes).includes(value as CountryCodes)) {\n    return value as CountryCodes;\n  }\n  return undefined;\n}\n\nexport function makeString(value: ExplicitAnyType): string | undefined {\n  // make sure its either a valid string or undefined\n  if (value === undefined) {\n    return undefined;\n  }\n  if (typeof value === \"string\") {\n    return value;\n  }\n  return undefined;\n}\n\nexport function makeNumber(value: ExplicitAnyType): number | undefined {\n  // make sure its either a valid number or number string or undefined\n  if (value === undefined) {\n    return undefined;\n  }\n  if (typeof value === \"number\") {\n    return value;\n  }\n  if (typeof value === \"string\") {\n    const number = Number(value);\n    if (!Number.isNaN(number)) {\n      return number;\n    }\n  }\n  return undefined;\n}\n","export const integrationScriptVersion = \"3.9.9\";\n","import type { SovendusPageData } from \"sovendus-integration-types\";\nimport {\n  CountryCodes,\n  sovendusPageApis,\n  type SovendusPageConfig,\n  type SovendusPageUrlParams,\n  type SovPageStatus,\n} from \"sovendus-integration-types\";\n\nimport { integrationScriptVersion } from \"../constants\";\nimport {\n  getOptimizeId,\n  loggerError,\n  throwErrorInNonBrowserContext,\n} from \"../shared-utils\";\nimport type { SovendusPage } from \"./sovendus-page-handler\";\n\nexport const urlParamAndCookieKeys = [\n  // These are the keys that Sovendus uses to store the url params as cookies\n  // for simplicity we store all supported url params as cookies\n  // as without the url params the cookies would not be set anyway\n  // each url param requires separate opt in on Sovendus side, so this is safe to use\n  //\n  // key only passed on in Switzerland Voucher Network\n  \"puid\",\n  // Optional link based conversion tracking for Sovendus Voucher Network\n  \"sovCouponCode\",\n  // Key used for Sovendus Checkout Products\n  \"sovReqToken\",\n  // used to enable debug mode for the testing process.\n  \"sovDebugLevel\",\n] as const as (keyof SovendusPageUrlParams)[];\n\nexport async function sovendusPageMain(\n  this: SovendusPage,\n  sovPageConfig: SovendusPageConfig,\n  onDone: ({ sovPageConfig, sovPageStatus }: SovendusPageData) => void,\n): Promise<void> {\n  const sovPageStatus = this.initializeStatus();\n  this.processConfig(sovPageConfig, sovPageStatus);\n\n  try {\n    if (!sovPageConfig) {\n      sovPageStatus.status.sovPageConfigFound = true;\n      onDone({ sovPageStatus, sovPageConfig });\n      loggerError(\"sovPageConfig is not defined\", \"LandingPage\");\n      return;\n    }\n    sovPageStatus.urlData = await this.lookForUrlParamsToStore(sovPageStatus);\n    this.sovendusOptimize(sovPageConfig, sovPageStatus);\n    sovPageStatus.times.integrationLoaderDone = this.getPerformanceTime();\n  } catch (error) {\n    loggerError(\"Crash in SovendusPage.main\", \"LandingPage\", error);\n  }\n  onDone({ sovPageStatus, sovPageConfig });\n}\n\nexport function initializePageStatus(this: SovendusPage): SovPageStatus {\n  return {\n    integrationScriptVersion: integrationScriptVersion,\n    urlData: {\n      sovCouponCode: undefined,\n      sovReqToken: undefined,\n      puid: undefined,\n      sovDebugLevel: undefined,\n    },\n    status: {\n      sovPageConfigFound: false,\n      loadedOptimize: false,\n      storedCookies: false,\n      countryCodePassedOnByPlugin: false,\n    },\n    times: {\n      integrationLoaderStart: this.getPerformanceTime(),\n    },\n  };\n}\n\nexport async function getSovendusUrlParameters(\n  this: SovendusPage,\n): Promise<SovendusPageUrlParams> {\n  const pageViewData: SovendusPageUrlParams = {\n    sovCouponCode: undefined,\n    sovReqToken: undefined,\n    puid: undefined,\n    sovDebugLevel: undefined,\n  };\n  const urlParams = await this.getSearchParams();\n  urlParamAndCookieKeys.forEach((dataKey) => {\n    const paramValue = urlParams?.get(dataKey);\n    if (paramValue) {\n      if (dataKey === \"sovDebugLevel\") {\n        if (paramValue === \"debug\" || paramValue === \"silent\") {\n          pageViewData[dataKey] = paramValue;\n        }\n      } else {\n        pageViewData[dataKey] = paramValue;\n      }\n    }\n  });\n  return pageViewData;\n}\n\nexport async function lookForUrlParamsToStore(\n  this: SovendusPage,\n  sovPageStatus: SovPageStatus,\n): Promise<SovendusPageUrlParams> {\n  try {\n    const pageViewData: SovendusPageUrlParams =\n      await this.getSovendusUrlParameters();\n    await Promise.all(\n      Object.entries(pageViewData).map(async ([cookieKey, cookieValue]) => {\n        if (cookieValue) {\n          // for simplicity we store all supported url params as cookies\n          // as without the url params the cookies would not be set anyway\n          // each url param requires separate opt in on Sovendus side, so this is safe to use\n          // you can add your custom logic here if you want to limit to certain url params\n          await this.setCookie(cookieKey, cookieValue);\n          sovPageStatus.status.storedCookies = true;\n        }\n      }),\n    );\n    return pageViewData;\n  } catch (error) {\n    loggerError(\"Error while storing url params\", \"LandingPage\", error);\n  }\n  return {\n    sovCouponCode: undefined,\n    sovReqToken: undefined,\n    puid: undefined,\n    sovDebugLevel: undefined,\n  };\n}\n\nexport function processPageConfig(\n  this: SovendusPage,\n  sovPageConfig: SovendusPageConfig,\n  sovPageStatus: SovPageStatus,\n): void {\n  this.handleCountryCode(sovPageConfig, sovPageStatus);\n}\n\nexport function handlePageCountryCode(\n  this: SovendusPage,\n  sovPageConfig: SovendusPageConfig,\n  sovPageStatus: SovPageStatus,\n): void {\n  // using string literal \"UK\" intentionally despite type mismatch as some systems might return UK instead of GB\n  if (sovPageConfig.country === \"UK\") {\n    sovPageConfig.country = CountryCodes.GB;\n  }\n  if (!sovPageConfig.country) {\n    sovPageStatus.status.countryCodePassedOnByPlugin = false;\n    sovPageConfig.country = sovPageConfig.country || this.detectCountryCode();\n  }\n}\n\nexport function sovendusOptimize(\n  this: SovendusPage,\n  sovPageConfig: SovendusPageConfig,\n  sovPageStatus: SovPageStatus,\n): void {\n  const optimizeId = getOptimizeId(\n    sovPageConfig.settings,\n    sovPageConfig.country,\n  );\n  if (!optimizeId) {\n    return;\n  }\n  this.handleOptimizeScript(optimizeId, sovPageConfig, sovPageStatus);\n  sovPageStatus.status.loadedOptimize = true;\n}\n\nexport const optimizeScriptId = \"sovendus-optimize-script\";\n\nexport function handleOptimizeScript(\n  this: SovendusPage,\n  optimizeId: string,\n  _sovPageConfig: SovendusPageConfig,\n  _sovPageStatus: SovPageStatus,\n): void {\n  throwErrorInNonBrowserContext({\n    methodName: \"sovendusOptimize\",\n    pageType: \"LandingPage\",\n    requiresDocument: true,\n  });\n  const script = document.createElement(\"script\");\n  script.async = true;\n  script.id = this.optimizeScriptId;\n  script.type = \"application/javascript\";\n  script.src = `${sovendusPageApis.optimize}${optimizeId}`;\n  document.head.appendChild(script);\n}\n","import type {\n  CountryCodes,\n  SovendusPageConfig,\n  SovendusPageData,\n  SovendusPageUrlParams,\n  SovPageStatus,\n} from \"sovendus-integration-types\";\nimport { sovendusPageApis } from \"sovendus-integration-types\";\n\nimport {\n  detectCountryCode,\n  getPerformanceTime,\n  throwErrorInNonBrowserContext,\n} from \"../shared-utils\";\nimport {\n  getSovendusUrlParameters,\n  handlePageCountryCode,\n  initializePageStatus,\n  lookForUrlParamsToStore,\n  optimizeScriptId,\n  processPageConfig,\n  sovendusOptimize,\n  sovendusPageMain,\n  urlParamAndCookieKeys,\n} from \"./utils\";\n\nexport class SovendusPage {\n  // Standard implementation of the Sovendus page script\n  // You can extend this class and override the methods to customize the behavior\n  // You can find example overrides in any of our Sovendus plugins\n  // Also make sure to check out our docs for more information\n\n  urlParamAndCookieKeys: (keyof SovendusPageUrlParams)[] =\n    urlParamAndCookieKeys;\n\n  main: (\n    sovPageConfig: SovendusPageConfig,\n    onDone: ({ sovPageConfig, sovPageStatus }: SovendusPageData) => void,\n  ) => Promise<void> = sovendusPageMain;\n\n  initializeStatus: () => SovPageStatus = initializePageStatus;\n\n  // make it async as some context might require it\n  getSearchParams(): Promise<URLSearchParams> | URLSearchParams {\n    throwErrorInNonBrowserContext({\n      methodName: \"getSearchParams\",\n      pageType: \"LandingPage\",\n      requiresWindow: true,\n    });\n    return new URLSearchParams(window.location.search);\n  }\n\n  // allow non async as some context might not require it\n  getSovendusUrlParameters: () =>\n    | Promise<SovendusPageUrlParams>\n    | SovendusPageUrlParams = getSovendusUrlParameters;\n\n  lookForUrlParamsToStore: (\n    sovPageStatus: SovPageStatus,\n  ) => Promise<SovendusPageUrlParams> = lookForUrlParamsToStore;\n\n  // make it async as some context might require it\n  setCookie(cookieName: string, value: string): Promise<void> | void {\n    throwErrorInNonBrowserContext({\n      methodName: \"setCookie\",\n      pageType: \"LandingPage\",\n      requiresDocument: true,\n      requiresWindow: true,\n    });\n    const path = \"/\";\n    const expireDate = new Date();\n    expireDate.setTime(expireDate.getTime() + 24 * 60 * 60 * 1000 * 30); // 30 days\n    const domain = window.location.hostname;\n    const cookieString = `${cookieName}=${value};secure;samesite=strict;expires=${expireDate.toUTCString()};domain=${domain};path=${path}`;\n    document.cookie = cookieString;\n  }\n\n  sovendusOptimize: (\n    sovPageConfig: SovendusPageConfig,\n    sovPageStatus: SovPageStatus,\n  ) => void = sovendusOptimize;\n\n  optimizeScriptId = optimizeScriptId;\n\n  handleOptimizeScript(\n    optimizeId: string,\n    _sovPageConfig: SovendusPageConfig,\n    _sovPageStatus: SovPageStatus,\n  ): void {\n    throwErrorInNonBrowserContext({\n      methodName: \"sovendusOptimize\",\n      pageType: \"LandingPage\",\n      requiresDocument: true,\n    });\n    const script = document.createElement(\"script\");\n    script.async = true;\n    script.id = this.optimizeScriptId;\n    script.type = \"application/javascript\";\n    script.src = `${sovendusPageApis.optimize}${optimizeId}`;\n    document.head.appendChild(script);\n  }\n\n  processConfig: (\n    sovPageConfig: SovendusPageConfig,\n    sovPageStatus: SovPageStatus,\n  ) => void = processPageConfig;\n\n  handleCountryCode: (\n    sovPageConfig: SovendusPageConfig,\n    sovPageStatus: SovPageStatus,\n  ) => void = handlePageCountryCode;\n\n  getPerformanceTime: () => number = getPerformanceTime;\n\n  detectCountryCode: () => CountryCodes | undefined = detectCountryCode;\n\n  unmount(): void {\n    document.getElementById(this.optimizeScriptId)?.remove();\n  }\n}\n","import type {\n  SovendusPageData,\n  SovendusPageWindow,\n} from \"sovendus-integration-types\";\n\nimport { SovendusPage } from \"./sovendus-page-handler\";\n\ndeclare const window: SovendusPageWindow;\n\nexport function loadSovendusPage(): void {\n  const OnDone = ({ sovPageStatus }: SovendusPageData): void => {\n    // just used for debugging with the testing app\n    window.sovPageStatus = sovPageStatus;\n  };\n\n  void new SovendusPage().main(window.sovPageConfig, OnDone);\n}\n","import { loadSovendusPage } from \"./sovendus-page\";\n\nloadSovendusPage();\n"],"names":[],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6]}